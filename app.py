import streamlit as st
import pandas as pd
from utils import *

st.set_page_config(page_title="Synonym Checker v3", layout="wide")
st.title("üîé Synonym Checker & Model Analyzer v3")

# --- Sidebar: –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ---
st.sidebar.header("–ú–æ–¥–µ–ª–∏")
model_source = st.sidebar.selectbox("–ò—Å—Ç–æ—á–Ω–∏–∫ –º–æ–¥–µ–ª–∏", ["huggingface","google_drive"])
model_id_a = st.sidebar.text_input("Model A ID", value="sentence-transformers/all-MiniLM-L6-v2")
model_a = load_model(model_source, model_id_a)

enable_ab = st.sidebar.checkbox("A/B —Ç–µ—Å—Ç –º–æ–¥–µ–ª–µ–π", value=False)
model_b = None
if enable_ab:
    model_id_b = st.sidebar.text_input("Model B ID", value="sentence-transformers/all-MiniLM-L6-v2")
    model_b = load_model(model_source, model_id_b)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ ---
st.header("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞")
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV/XLSX/JSON —Ñ–∞–π–ª", type=["csv","xlsx","json"])
df = None
if uploaded_file:
    df = read_uploaded_file_bytes(uploaded_file)
    st.success(f"–î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, {len(df)} —Å—Ç—Ä–æ–∫")
    st.dataframe(df.head())

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã —Ñ—Ä–∞–∑ ---
st.header("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã —Ñ—Ä–∞–∑")
text1 = st.text_input("–§—Ä–∞–∑–∞ 1")
text2 = st.text_input("–§—Ä–∞–∑–∞ 2")
if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—É"):
    if not text1 or not text2: st.warning("–í–≤–µ–¥–∏—Ç–µ –æ–±–µ —Ñ—Ä–∞–∑—ã")
    else:
        t1, t2 = preprocess_text(text1), preprocess_text(text2)
        emb1 = encode_texts_in_batches(model_a,[t1])
        emb2 = encode_texts_in_batches(model_a,[t2])
        score_a = cosine_similarity(emb1[0], emb2[0])
        st.metric("Score A", f"{score_a:.4f}")
        if model_b:
            emb1b = encode_texts_in_batches(model_b,[t1])
            emb2b = encode_texts_in_batches(model_b,[t2])
            score_b = cosine_similarity(emb1b[0], emb2b[0])
            st.metric("Score B", f"{score_b:.4f}", delta=f"{score_b-score_a:+.4f}")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ ---
st.header("‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤")
if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä—ã"):
    if df is not None:
        df_pairs = generate_synonym_pairs(df, text_col=df.columns[0], n=200)
        st.dataframe(df_pairs.head())

# --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è embeddings ---
st.header("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è Embeddings")
if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å 2D scatter"):
    if df is not None:
        texts = df[df.columns[0]].dropna().tolist()[:200]
        plot_embeddings_2d(model_a, texts)
